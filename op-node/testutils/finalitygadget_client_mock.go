// Code generated by MockGen. DO NOT EDIT.
// Source: ./rollup/finality/expected_clients.go
//
// Generated by this command:
//
//	mockgen -source=./rollup/finality/expected_clients.go -package mocks -destination ./testutils/finalitygadget_client_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/babylonlabs-io/finality-gadget/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIFinalityGadgetClient is a mock of IFinalityGadgetClient interface.
type MockIFinalityGadgetClient struct {
	ctrl     *gomock.Controller
	recorder *MockIFinalityGadgetClientMockRecorder
}

// MockIFinalityGadgetClientMockRecorder is the mock recorder for MockIFinalityGadgetClient.
type MockIFinalityGadgetClientMockRecorder struct {
	mock *MockIFinalityGadgetClient
}

// NewMockIFinalityGadgetClient creates a new mock instance.
func NewMockIFinalityGadgetClient(ctrl *gomock.Controller) *MockIFinalityGadgetClient {
	mock := &MockIFinalityGadgetClient{ctrl: ctrl}
	mock.recorder = &MockIFinalityGadgetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFinalityGadgetClient) EXPECT() *MockIFinalityGadgetClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIFinalityGadgetClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIFinalityGadgetClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIFinalityGadgetClient)(nil).Close))
}

// QueryBlockRangeBabylonFinalized mocks base method.
func (m *MockIFinalityGadgetClient) QueryBlockRangeBabylonFinalized(blocks []*types.Block) (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBlockRangeBabylonFinalized", blocks)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlockRangeBabylonFinalized indicates an expected call of QueryBlockRangeBabylonFinalized.
func (mr *MockIFinalityGadgetClientMockRecorder) QueryBlockRangeBabylonFinalized(blocks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlockRangeBabylonFinalized", reflect.TypeOf((*MockIFinalityGadgetClient)(nil).QueryBlockRangeBabylonFinalized), blocks)
}

// QueryBtcStakingActivatedTimestamp mocks base method.
func (m *MockIFinalityGadgetClient) QueryBtcStakingActivatedTimestamp() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBtcStakingActivatedTimestamp")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBtcStakingActivatedTimestamp indicates an expected call of QueryBtcStakingActivatedTimestamp.
func (mr *MockIFinalityGadgetClientMockRecorder) QueryBtcStakingActivatedTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBtcStakingActivatedTimestamp", reflect.TypeOf((*MockIFinalityGadgetClient)(nil).QueryBtcStakingActivatedTimestamp))
}

// QueryIsBlockBabylonFinalized mocks base method.
func (m *MockIFinalityGadgetClient) QueryIsBlockBabylonFinalized(block *types.Block) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIsBlockBabylonFinalized", block)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockBabylonFinalized indicates an expected call of QueryIsBlockBabylonFinalized.
func (mr *MockIFinalityGadgetClientMockRecorder) QueryIsBlockBabylonFinalized(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockBabylonFinalized", reflect.TypeOf((*MockIFinalityGadgetClient)(nil).QueryIsBlockBabylonFinalized), block)
}

// QueryIsBlockFinalizedByHash mocks base method.
func (m *MockIFinalityGadgetClient) QueryIsBlockFinalizedByHash(hash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIsBlockFinalizedByHash", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockFinalizedByHash indicates an expected call of QueryIsBlockFinalizedByHash.
func (mr *MockIFinalityGadgetClientMockRecorder) QueryIsBlockFinalizedByHash(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockFinalizedByHash", reflect.TypeOf((*MockIFinalityGadgetClient)(nil).QueryIsBlockFinalizedByHash), hash)
}

// QueryIsBlockFinalizedByHeight mocks base method.
func (m *MockIFinalityGadgetClient) QueryIsBlockFinalizedByHeight(height uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIsBlockFinalizedByHeight", height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockFinalizedByHeight indicates an expected call of QueryIsBlockFinalizedByHeight.
func (mr *MockIFinalityGadgetClientMockRecorder) QueryIsBlockFinalizedByHeight(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockFinalizedByHeight", reflect.TypeOf((*MockIFinalityGadgetClient)(nil).QueryIsBlockFinalizedByHeight), height)
}

// QueryLatestFinalizedBlock mocks base method.
func (m *MockIFinalityGadgetClient) QueryLatestFinalizedBlock() (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestFinalizedBlock")
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestFinalizedBlock indicates an expected call of QueryLatestFinalizedBlock.
func (mr *MockIFinalityGadgetClientMockRecorder) QueryLatestFinalizedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestFinalizedBlock", reflect.TypeOf((*MockIFinalityGadgetClient)(nil).QueryLatestFinalizedBlock))
}
